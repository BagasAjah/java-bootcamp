package com.mitrais.service;

import com.mitrais.model.AccountInfo;
import com.mitrais.util.DelayUtils;
import com.mitrais.util.FormatUtils;

import java.util.Random;
import java.util.Scanner;
import java.util.function.Function;

public class FundTransferService implements IService {
    private AccountInfo accountInfo;
    private UserService userService;

    public FundTransferService(AccountInfo accountInfo, UserService userService) {
        this.accountInfo = accountInfo;
        this.userService = userService;
    }

    @Override
    public void display() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("Please enter destination account and press enter to continue or");
        System.out.print("press enter to go back to Transaction:");
    }

    @Override
    public boolean process(Scanner scanner) {
        final String CONFIRM_OPTION = "1";
        this.display();
        final String destinationAccount = scanner.nextLine();
        if (destinationAccount.length() == 0) {
            return true;
        }
        this.displayGetAmount();
        final String amount = scanner.nextLine();
        if (amount.length() == 0) {
            return true;
        }
        final int referenceNumber = this.displayReferenceNumber();
        scanner.nextLine();
        this.displayConfirmation(destinationAccount, amount, referenceNumber);
        final String confirmationType = scanner.nextLine();
        if (CONFIRM_OPTION.equals(confirmationType)) {
            return confirmProcess(scanner, destinationAccount, amount, referenceNumber);
        } else {
            return true;
        }
    }

    private boolean confirmProcess(Scanner scanner, String destinationAccount, String amount, int referenceNumber) {
        if (!this.validateUserInput(destinationAccount, amount)) {
            DelayUtils.delay();
            return true;
        }
        AccountInfo destinationAccountInfo = this.userService.getUserByAccountNumber(destinationAccount);
        this.accountInfo.withdrawProcess(Integer.valueOf(amount));
        if (this.accountInfo.getErrorMessage().length() > 0) {
            DelayUtils.delay();
            return true;
        }
        destinationAccountInfo.fundTransferProcess(Integer.valueOf(amount));
        this.userService.updateAccountValue(accountInfo);
        this.userService.updateAccountValue(destinationAccountInfo);
        IService fundTransferSummaryService = new FundTransferSummaryService(destinationAccountInfo, Integer.valueOf(amount), referenceNumber);
        return fundTransferSummaryService.process(scanner);
    }

    private void displayGetAmount() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("Please enter transfer amount and");
        System.out.println("press enter to continue or");
        System.out.print("press enter to go back to Transaction:");
    }

    private int displayReferenceNumber() {
        Random random = new Random();
        int randomNumber = 100000 + random.nextInt(90000);
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("Reference Number: " + randomNumber + "(This is an autogenerated random 6 digits number)");
        System.out.println("press enter to continue");
        return randomNumber;
    }

    private void displayConfirmation(String destinationAccount, String amount, int referenceNumber) {
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("Transfer Confirmation");
        System.out.println("Destination Account : " + destinationAccount);
        System.out.println("Transfer Amount : $" + amount);
        System.out.println("Reference Number : " + referenceNumber);
        System.out.println("");
        System.out.println("1. Confirm Trx");
        System.out.println("2. Cancel Trx");
        System.out.print("Choose option[2]:");
    }

    private boolean validateUserInput(String destinationAccount, String amount) {
        String errorMessageValidateAccount = validateAccountFormat.apply(destinationAccount);
        if (errorMessageValidateAccount.length() > 0) {
            System.out.println(errorMessageValidateAccount);
            return false;
        }
        String errorMessageValidateAmount = validateAmountFormat.apply(amount);
        if (errorMessageValidateAmount.length() > 0) {
            System.out.println(errorMessageValidateAmount);
            return false;
        }
        return true;
    }

    private Function<String, String> validateAccountFormat = account -> {
        if (!FormatUtils.isNumeric(account)) {
            return "Invalid account";
        }
        return "";
    };

    private Function<String, String> validateAmountFormat = amountString -> {
        if (!FormatUtils.isNumeric(amountString)) {
            return "Invalid amount";
        }
        int amount = Integer.valueOf(amountString);
        final int MAX_AMOUNT_VALUE = 1000;
        final int MIN_AMOUNT_VALUE = 1;
        if (amount > MAX_AMOUNT_VALUE) {
            return "Maximum amount to withdraw is $" + MAX_AMOUNT_VALUE;
        }
        if (amount < MIN_AMOUNT_VALUE) {
            return "Minimum amount to withdraw is $" + amount;
        }
        return "";
    };
}
